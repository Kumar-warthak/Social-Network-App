using System;
using System.IO;
using System.Text;

public void Main()
{
    // Specify the path of your CSV file
    string csvFilePath = Dts.Variables["User::CsvFilePath"].Value.ToString();
    
    // Read all lines from the CSV file
    string[] lines = File.ReadAllLines(csvFilePath);

    // Create a StringBuilder to store the new CSV content with split columns
    StringBuilder newCsvContent = new StringBuilder();

    // Set the index of the column that needs to be split
    int targetColumnIndex = 2; // For example, if the third column needs to be split
    
    // Variable to store the maximum number of new columns based on the data
    int maxSplitColumns = 0;

    // Process the CSV file line by line
    for (int i = 0; i < lines.Length; i++)
    {
        string line = lines[i];
        
        // Split the line by commas to get the individual columns
        string[] columns = line.Split(',');

        if (i == 0)
        {
            // For the header row, keep the original headers
            newCsvContent.Append(string.Join(",", columns));

            // Calculate the maximum number of new columns dynamically in the next loop
        }
        else
        {
            // Split the target column (e.g., the third column) by semicolon
            string[] splitValues = columns[targetColumnIndex].Split(';'); // Adjust based on actual delimiter

            // Update maxSplitColumns based on the number of split values in the current row
            maxSplitColumns = Math.Max(maxSplitColumns, splitValues.Length);

            // Add the original columns
            newCsvContent.Append(string.Join(",", columns[0], columns[1]));

            // Dynamically append the split values (add empty strings for missing values)
            for (int j = 0; j < splitValues.Length; j++)
            {
                newCsvContent.Append("," + splitValues[j].Trim());
            }

            // Fill with empty columns if splitValues has fewer elements than maxSplitColumns
            for (int j = splitValues.Length; j < maxSplitColumns; j++)
            {
                newCsvContent.Append(",");
            }
        }

        // Add a newline at the end of the row
        newCsvContent.AppendLine();
    }

    // Now go back and generate the header row with the correct number of new columns
    // Insert new dynamic column headers into the first row
    string[] originalHeaderColumns = lines[0].Split(',');

    // Generate new headers for the split columns
    newCsvContent.Insert(0, string.Join(",", originalHeaderColumns[0], originalHeaderColumns[1]));

    for (int j = 1; j <= maxSplitColumns; j++)
    {
        newCsvContent.Insert(newCsvContent.Length - newCsvContent.ToString().Length, ",NewColumn" + j);
    }
    newCsvContent.AppendLine();

    // Write the new content to a new CSV file (or overwrite the existing one)
    string newCsvFilePath = Path.Combine(Path.GetDirectoryName(csvFilePath), "Processed_" + Path.GetFileName(csvFilePath));
    File.WriteAllText(newCsvFilePath, newCsvContent.ToString());

    // Optionally, output the path of the new file to SSIS
    Dts.Variables["User::NewCsvFilePath"].Value = newCsvFilePath;

    // Indicate success
    Dts.TaskResult = (int)ScriptResults.Success;
}
