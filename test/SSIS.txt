Upload File

using System;
using System.IO;
using System.Net;
using System.Text;
using System.Web.Script.Serialization;
using System.Collections.Generic;

public class ScriptMain
{
    // Replace with your actual values
    string tenantId = "your-tenant-id";
    string clientId = "your-client-id";
    string clientSecret = "your-client-secret";
    string tenantDomain = "yourcompany.sharepoint.com";
    string siteName = "abc-001";  // your SharePoint site
    string documentLibraryName = "Documents";  // usually "Documents" or your custom library
    string proxyUrl = "http://proxy.company.com:8080";  // optional, if required in your network

    public void Main()
    {
        try
        {
            string localFilePath = @"C:\LocalFolder\file.pdf";
            string remoteFilePath = "FolderInLibrary/file.pdf";

            UploadFileToSharePoint(localFilePath, remoteFilePath);

            Dts.TaskResult = (int)ScriptResults.Success;
        }
        catch (Exception ex)
        {
            Console.WriteLine("Fatal error: " + ex.Message);
            Dts.TaskResult = (int)ScriptResults.Failure;
            return; // Exit immediately
        }
    }

    private void UploadFileToSharePoint(string localFilePath, string remoteFilePath)
    {
        try
        {
            IWebProxy proxy = new WebProxy(proxyUrl, true)
            {
                Credentials = CredentialCache.DefaultCredentials
            };

            string accessToken = GetAccessToken(proxy);
            string siteId = GetSiteId(accessToken, proxy);
            string driveId = GetDriveId(accessToken, proxy, siteId);

            byte[] fileBytes = File.ReadAllBytes(localFilePath);
            string uploadUrl = $"https://graph.microsoft.com/v1.0/drives/{driveId}/root:/{remoteFilePath}:/content";

            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(uploadUrl);
            request.Method = "PUT";
            request.Headers.Add("Authorization", "Bearer " + accessToken);
            request.ContentType = "application/octet-stream";
            request.ContentLength = fileBytes.Length;
            request.Proxy = proxy;

            using (Stream stream = request.GetRequestStream())
                stream.Write(fileBytes, 0, fileBytes.Length);

            using (HttpWebResponse response = (HttpWebResponse)request.GetResponse())
            using (StreamReader reader = new StreamReader(response.GetResponseStream()))
            {
                string result = reader.ReadToEnd();
                Console.WriteLine("Upload successful: " + result);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Upload failed: " + ex.Message);
            throw;
        }
    }

    private string GetAccessToken(IWebProxy proxy)
    {
        try
        {
            string url = $"https://login.microsoftonline.com/{tenantId}/oauth2/v2.0/token";
            string body = $"grant_type=client_credentials&client_id={clientId}&client_secret={clientSecret}&scope=https%3A%2F%2Fgraph.microsoft.com%2F.default";
            byte[] byteData = Encoding.UTF8.GetBytes(body);

            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);
            request.Method = "POST";
            request.ContentType = "application/x-www-form-urlencoded";
            request.ContentLength = byteData.Length;
            request.Proxy = proxy;

            using (Stream stream = request.GetRequestStream())
                stream.Write(byteData, 0, byteData.Length);

            using (HttpWebResponse response = (HttpWebResponse)request.GetResponse())
            using (StreamReader reader = new StreamReader(response.GetResponseStream()))
            {
                var result = reader.ReadToEnd();
                var json = new JavaScriptSerializer().Deserialize<Dictionary<string, object>>(result);
                return json["access_token"].ToString();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Token retrieval failed: " + ex.Message);
            throw;
        }
    }

    private string GetSiteId(string accessToken, IWebProxy proxy)
    {
        try
        {
            string url = $"https://graph.microsoft.com/v1.0/sites/{tenantDomain}:/sites/{siteName}?$select=id";
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);
            request.Method = "GET";
            request.Headers.Add("Authorization", "Bearer " + accessToken);
            request.Proxy = proxy;

            using (HttpWebResponse response = (HttpWebResponse)request.GetResponse())
            using (StreamReader reader = new StreamReader(response.GetResponseStream()))
            {
                var result = reader.ReadToEnd();
                var json = new JavaScriptSerializer().Deserialize<Dictionary<string, object>>(result);
                return json["id"].ToString();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Site ID fetch failed: " + ex.Message);
            throw;
        }
    }

    private string GetDriveId(string accessToken, IWebProxy proxy, string siteId)
    {
        try
        {
            string url = $"https://graph.microsoft.com/v1.0/sites/{siteId}/drives";
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);
            request.Method = "GET";
            request.Headers.Add("Authorization", "Bearer " + accessToken);
            request.Proxy = proxy;

            using (HttpWebResponse response = (HttpWebResponse)request.GetResponse())
            using (StreamReader reader = new StreamReader(response.GetResponseStream()))
            {
                var result = reader.ReadToEnd();
                var json = new JavaScriptSerializer().Deserialize<Dictionary<string, object>>(result);
                var list = (System.Collections.ArrayList)json["value"];

                foreach (var item in list)
                {
                    var drive = (Dictionary<string, object>)item;
                    if (drive["name"].ToString().Equals(documentLibraryName, StringComparison.OrdinalIgnoreCase))
                        return drive["id"].ToString();
                }

                throw new Exception("Document library not found.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Drive ID fetch failed: " + ex.Message);
            throw;
        }
    }
}

Download File
using System;
using System.IO;
using System.Net;
using System.Text;
using System.Web.Script.Serialization;
using System.Collections.Generic;

public class ScriptMain
{
    // Replace with your actual values
    string tenantId = "your-tenant-id";
    string clientId = "your-client-id";
    string clientSecret = "your-client-secret";
    string tenantDomain = "yourcompany.sharepoint.com";
    string siteName = "abc-001";  // your SharePoint site
    string documentLibraryName = "Documents";  // usually "Documents" or your custom library
    string proxyUrl = "http://proxy.company.com:8080";  // optional, if required in your network

    public void Main()
    {
        try
        {
            string localFilePath = @"C:\LocalFolder\file.pdf";
            string remoteFilePath = "FolderInLibrary/file.pdf";

            UploadFileToSharePoint(localFilePath, remoteFilePath);

            Dts.TaskResult = (int)ScriptResults.Success;
        }
        catch (Exception ex)
        {
            Console.WriteLine("Fatal error: " + ex.Message);
            Dts.TaskResult = (int)ScriptResults.Failure;
            return; // Exit immediately
        }
    }

    private void UploadFileToSharePoint(string localFilePath, string remoteFilePath)
    {
        try
        {
            IWebProxy proxy = new WebProxy(proxyUrl, true)
            {
                Credentials = CredentialCache.DefaultCredentials
            };

            string accessToken = GetAccessToken(proxy);
            string siteId = GetSiteId(accessToken, proxy);
            string driveId = GetDriveId(accessToken, proxy, siteId);

            byte[] fileBytes = File.ReadAllBytes(localFilePath);
            string uploadUrl = $"https://graph.microsoft.com/v1.0/drives/{driveId}/root:/{remoteFilePath}:/content";

            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(uploadUrl);
            request.Method = "PUT";
            request.Headers.Add("Authorization", "Bearer " + accessToken);
            request.ContentType = "application/octet-stream";
            request.ContentLength = fileBytes.Length;
            request.Proxy = proxy;

            using (Stream stream = request.GetRequestStream())
                stream.Write(fileBytes, 0, fileBytes.Length);

            using (HttpWebResponse response = (HttpWebResponse)request.GetResponse())
            using (StreamReader reader = new StreamReader(response.GetResponseStream()))
            {
                string result = reader.ReadToEnd();
                Console.WriteLine("Upload successful: " + result);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Upload failed: " + ex.Message);
            throw;
        }
    }

    private string GetAccessToken(IWebProxy proxy)
    {
        try
        {
            string url = $"https://login.microsoftonline.com/{tenantId}/oauth2/v2.0/token";
            string body = $"grant_type=client_credentials&client_id={clientId}&client_secret={clientSecret}&scope=https%3A%2F%2Fgraph.microsoft.com%2F.default";
            byte[] byteData = Encoding.UTF8.GetBytes(body);

            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);
            request.Method = "POST";
            request.ContentType = "application/x-www-form-urlencoded";
            request.ContentLength = byteData.Length;
            request.Proxy = proxy;

            using (Stream stream = request.GetRequestStream())
                stream.Write(byteData, 0, byteData.Length);

            using (HttpWebResponse response = (HttpWebResponse)request.GetResponse())
            using (StreamReader reader = new StreamReader(response.GetResponseStream()))
            {
                var result = reader.ReadToEnd();
                var json = new JavaScriptSerializer().Deserialize<Dictionary<string, object>>(result);
                return json["access_token"].ToString();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Token retrieval failed: " + ex.Message);
            throw;
        }
    }

    private string GetSiteId(string accessToken, IWebProxy proxy)
    {
        try
        {
            string url = $"https://graph.microsoft.com/v1.0/sites/{tenantDomain}:/sites/{siteName}?$select=id";
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);
            request.Method = "GET";
            request.Headers.Add("Authorization", "Bearer " + accessToken);
            request.Proxy = proxy;

            using (HttpWebResponse response = (HttpWebResponse)request.GetResponse())
            using (StreamReader reader = new StreamReader(response.GetResponseStream()))
            {
                var result = reader.ReadToEnd();
                var json = new JavaScriptSerializer().Deserialize<Dictionary<string, object>>(result);
                return json["id"].ToString();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Site ID fetch failed: " + ex.Message);
            throw;
        }
    }

    private string GetDriveId(string accessToken, IWebProxy proxy, string siteId)
    {
        try
        {
            string url = $"https://graph.microsoft.com/v1.0/sites/{siteId}/drives";
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);
            request.Method = "GET";
            request.Headers.Add("Authorization", "Bearer " + accessToken);
            request.Proxy = proxy;

            using (HttpWebResponse response = (HttpWebResponse)request.GetResponse())
            using (StreamReader reader = new StreamReader(response.GetResponseStream()))
            {
                var result = reader.ReadToEnd();
                var json = new JavaScriptSerializer().Deserialize<Dictionary<string, object>>(result);
                var list = (System.Collections.ArrayList)json["value"];

                foreach (var item in list)
                {
                    var drive = (Dictionary<string, object>)item;
                    if (drive["name"].ToString().Equals(documentLibraryName, StringComparison.OrdinalIgnoreCase))
                        return drive["id"].ToString();
                }

                throw new Exception("Document library not found.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Drive ID fetch failed: " + ex.Message);
            throw;
        }
    }
}


Move File

using System;
using System.IO;
using System.Net;
using System.Text;
using System.Web.Script.Serialization;
using System.Collections.Generic;

public class ScriptMain
{
    // Replace with your values
    string tenantId = "your-tenant-id";
    string clientId = "your-client-id";
    string clientSecret = "your-client-secret";
    string tenantDomain = "yourtenant.sharepoint.com";
    string siteName = "abc-001"; // Site name (e.g., team name)
    string documentLibraryName = "Documents";
    string proxyUrl = "http://proxy.company.com:8080"; // or leave empty if no proxy

    public void Main()
    {
        try
        {
            string sourceFilePath = "FolderA/myfile.txt";
            string targetFolderPath = "FolderB";

            MoveFileInSharePoint(sourceFilePath, targetFolderPath);

            Dts.TaskResult = (int)ScriptResults.Success;
        }
        catch (Exception ex)
        {
            Console.WriteLine("Move failed: " + ex.Message);
            Dts.TaskResult = (int)ScriptResults.Failure;
        }
    }

    private void MoveFileInSharePoint(string sourcePath, string destinationFolder)
    {
        IWebProxy proxy = string.IsNullOrEmpty(proxyUrl) ? null : new WebProxy(proxyUrl, true)
        {
            Credentials = CredentialCache.DefaultCredentials
        };

        string accessToken = GetAccessToken(proxy);
        string siteId = GetSiteId(accessToken, proxy);
        string driveId = GetDriveId(accessToken, proxy, siteId);

        // Extract file name
        string fileName = Path.GetFileName(sourcePath);
        string destinationPath = $"/{destinationFolder}/{fileName}";

        string moveUrl = $"https://graph.microsoft.com/v1.0/drives/{driveId}/root:/{sourcePath}";

        var payload = new
        {
            parentReference = new { path = $"/drives/{driveId}/root:/{destinationFolder}" },
            name = fileName
        };

        string jsonBody = new JavaScriptSerializer().Serialize(payload);
        byte[] data = Encoding.UTF8.GetBytes(jsonBody);

        HttpWebRequest request = (HttpWebRequest)WebRequest.Create(moveUrl);
        request.Method = "PATCH";
        request.ContentType = "application/json";
        request.ContentLength = data.Length;
        request.Headers.Add("Authorization", "Bearer " + accessToken);
        request.Proxy = proxy;

        using (Stream stream = request.GetRequestStream())
            stream.Write(data, 0, data.Length);

        using (HttpWebResponse response = (HttpWebResponse)request.GetResponse())
        {
            if (response.StatusCode != HttpStatusCode.OK)
                throw new Exception("Failed to move file: " + response.StatusDescription);
        }

        Console.WriteLine($"Moved '{sourcePath}' to '{destinationPath}'");
    }

    private string GetAccessToken(IWebProxy proxy)
    {
        string url = $"https://login.microsoftonline.com/{tenantId}/oauth2/v2.0/token";
        string body = $"grant_type=client_credentials&client_id={clientId}&client_secret={clientSecret}&scope=https%3A%2F%2Fgraph.microsoft.com%2F.default";
        byte[] byteData = Encoding.UTF8.GetBytes(body);

        HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);
        request.Method = "POST";
        request.ContentType = "application/x-www-form-urlencoded";
        request.ContentLength = byteData.Length;
        request.Proxy = proxy;

        using (Stream stream = request.GetRequestStream())
            stream.Write(byteData, 0, byteData.Length);

        using (HttpWebResponse response = (HttpWebResponse)request.GetResponse())
        using (StreamReader reader = new StreamReader(response.GetResponseStream()))
        {
            var result = reader.ReadToEnd();
            var json = new JavaScriptSerializer().Deserialize<Dictionary<string, object>>(result);
            return json["access_token"].ToString();
        }
    }

    private string GetSiteId(string accessToken, IWebProxy proxy)
    {
        string url = $"https://graph.microsoft.com/v1.0/sites/{tenantDomain}:/sites/{siteName}?$select=id";
        HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);
        request.Method = "GET";
        request.Headers.Add("Authorization", "Bearer " + accessToken);
        request.Proxy = proxy;

        using (HttpWebResponse response = (HttpWebResponse)request.GetResponse())
        using (StreamReader reader = new StreamReader(response.GetResponseStream()))
        {
            var result = reader.ReadToEnd();
            var json = new JavaScriptSerializer().Deserialize<Dictionary<string, object>>(result);
            return json["id"].ToString();
        }
    }

    private string GetDriveId(string accessToken, IWebProxy proxy, string siteId)
    {
        string url = $"https://graph.microsoft.com/v1.0/sites/{siteId}/drives";
        HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);
        request.Method = "GET";
        request.Headers.Add("Authorization", "Bearer " + accessToken);
        request.Proxy = proxy;

        using (HttpWebResponse response = (HttpWebResponse)request.GetResponse())
        using (StreamReader reader = new StreamReader(response.GetResponseStream()))
        {
            var result = reader.ReadToEnd();
            var json = new JavaScriptSerializer().Deserialize<Dictionary<string, object>>(result);
            var list = (System.Collections.ArrayList)json["value"];

            foreach (var item in list)
            {
                var drive = (Dictionary<string, object>)item;
                if (drive["name"].ToString().Equals(documentLibraryName, StringComparison.OrdinalIgnoreCase))
                    return drive["id"].ToString();
            }

            throw new Exception("Document library not found.");
        }
    }
}

Read List

using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Net;
using System.Text;
using System.IO;
using Microsoft.Identity.Client;
using Newtonsoft.Json.Linq;

class Program
{
    private static readonly string tenantId = "your-tenant-id";
    private static readonly string clientId = "your-client-id";
    private static readonly string clientSecret = "your-client-secret";
    private static readonly string siteName = "yourtenant.sharepoint.com:/sites/yoursite";
    private static readonly string listName = "your-list-name";
    private static readonly string sqlConnectionString = "Server=your-sql-server;Database=your-db;Integrated Security=true;";
    private static readonly string proxyUrl = "http://proxy.company.com:8080"; // Set to null or "" if no proxy

    static void Main()
    {
        try
        {
            string token = GetAccessToken();
            string siteId = GetSiteId(token);
            List<JObject> items = GetListItems(siteId, listName, token);
            InsertItemsToSql(items);
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error: " + ex.Message);
            Environment.Exit(1); // Fail-fast
        }
    }

    static string GetAccessToken()
    {
        var app = ConfidentialClientApplicationBuilder
            .Create(clientId)
            .WithClientSecret(clientSecret)
            .WithAuthority(new Uri($"https://login.microsoftonline.com/{tenantId}"))
            .Build();

        var result = app.AcquireTokenForClient(new[] { "https://graph.microsoft.com/.default" }).ExecuteAsync().Result;
        return result.AccessToken;
    }

    static IWebProxy GetProxy()
    {
        if (string.IsNullOrEmpty(proxyUrl)) return null;
        return new WebProxy(proxyUrl, true) { Credentials = CredentialCache.DefaultCredentials };
    }

    static string GetSiteId(string token)
    {
        string url = $"https://graph.microsoft.com/v1.0/sites/{siteName}";
        string jsonResponse = SendGraphRequest(url, "GET", token);
        var json = JObject.Parse(jsonResponse);
        return json["id"]?.ToString() ?? throw new Exception("Site ID not found");
    }

    static List<JObject> GetListItems(string siteId, string listName, string token)
    {
        string url = $"https://graph.microsoft.com/v1.0/sites/{siteId}/lists/{listName}/items?expand=fields";
        string jsonResponse = SendGraphRequest(url, "GET", token);
        var json = JObject.Parse(jsonResponse);

        var items = new List<JObject>();
        foreach (var item in json["value"])
        {
            items.Add((JObject)item["fields"]);
        }

        return items;
    }

    static string SendGraphRequest(string url, string method, string token)
    {
        var request = (HttpWebRequest)WebRequest.Create(url);
        request.Method = method;
        request.Headers.Add("Authorization", "Bearer " + token);
        request.ContentType = "application/json";
        request.Proxy = GetProxy();

        using (HttpWebResponse response = (HttpWebResponse)request.GetResponse())
        {
            using (StreamReader reader = new StreamReader(response.GetResponseStream()))
            {
                return reader.ReadToEnd();
            }
        }
    }

    static void InsertItemsToSql(List<JObject> items)
    {
        using (SqlConnection conn = new SqlConnection(sqlConnectionString))
        {
            conn.Open();

            foreach (var item in items)
            {
                using (SqlCommand cmd = new SqlCommand("YourStoredProcedureName", conn))
                {
                    cmd.CommandType = CommandType.StoredProcedure;

                    // Map SharePoint list fields to SP params
                    cmd.Parameters.AddWithValue("@Title", item["Title"]?.ToString() ?? "");
                    cmd.Parameters.AddWithValue("@Created", item["Created"]?.ToString() ?? "");

                    // Add additional parameters based on your SP schema

                    cmd.ExecuteNonQuery();
                }
            }
        }
    }
}






