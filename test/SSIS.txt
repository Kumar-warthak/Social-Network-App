using System;
using System.IO;
using System.Text;
using System.Net;
using System.Web.Script.Serialization;
using System.Collections.Generic;

public void Main()
{
    try
    {
        // === Configuration ===
        string tenantId = "your-tenant-id";
        string clientId = "your-client-id";
        string clientSecret = "your-client-secret";
        string tenantDomain = "yourcompany.sharepoint.com";
        string siteName = "abc-001"; // Site name
        string documentLibraryName = "Documents";
        string filePath = @"C:\Path\To\Your\File.txt";
        string uploadFileName = "File.txt";

        string proxyUrl = "http://proxy.company.com:8080"; // proxy
        bool useDefaultCredentials = true; // or set to false and manually assign credentials

        // === Proxy Setup ===
        IWebProxy proxy = new WebProxy(proxyUrl, true);
        proxy.Credentials = useDefaultCredentials ? CredentialCache.DefaultCredentials : new NetworkCredential("username", "password", "domain");
        WebRequest.DefaultWebProxy = proxy;

        // === Get Access Token ===
        string tokenUrl = $"https://login.microsoftonline.com/{tenantId}/oauth2/v2.0/token";
        string tokenBody = $"grant_type=client_credentials&client_id={clientId}&client_secret={clientSecret}&scope=https%3A%2F%2Fgraph.microsoft.com%2F.default";
        byte[] byteBody = Encoding.UTF8.GetBytes(tokenBody);

        HttpWebRequest tokenRequest = (HttpWebRequest)WebRequest.Create(tokenUrl);
        tokenRequest.Method = "POST";
        tokenRequest.ContentType = "application/x-www-form-urlencoded";
        tokenRequest.ContentLength = byteBody.Length;
        tokenRequest.Proxy = proxy;

        using (Stream stream = tokenRequest.GetRequestStream())
            stream.Write(byteBody, 0, byteBody.Length);

        string accessToken;
        using (HttpWebResponse response = (HttpWebResponse)tokenRequest.GetResponse())
        using (StreamReader reader = new StreamReader(response.GetResponseStream()))
        {
            string result = reader.ReadToEnd();
            var tokenData = new JavaScriptSerializer().Deserialize<Dictionary<string, object>>(result);
            accessToken = tokenData["access_token"].ToString();
        }

        // === Get Site ID ===
        string siteIdUrl = $"https://graph.microsoft.com/v1.0/sites/{tenantDomain}:/sites/{siteName}?$select=id";
        HttpWebRequest siteIdRequest = (HttpWebRequest)WebRequest.Create(siteIdUrl);
        siteIdRequest.Method = "GET";
        siteIdRequest.Headers.Add("Authorization", "Bearer " + accessToken);
        siteIdRequest.Proxy = proxy;

        string siteId;
        using (HttpWebResponse response = (HttpWebResponse)siteIdRequest.GetResponse())
        using (StreamReader reader = new StreamReader(response.GetResponseStream()))
        {
            string siteResult = reader.ReadToEnd();
            var siteData = new JavaScriptSerializer().Deserialize<Dictionary<string, object>>(siteResult);
            siteId = siteData["id"].ToString();
        }

        // === Get Drive ID ===
        string driveUrl = $"https://graph.microsoft.com/v1.0/sites/{siteId}/drives";
        HttpWebRequest driveRequest = (HttpWebRequest)WebRequest.Create(driveUrl);
        driveRequest.Method = "GET";
        driveRequest.Headers.Add("Authorization", "Bearer " + accessToken);
        driveRequest.Proxy = proxy;

        string driveId = null;
        using (HttpWebResponse response = (HttpWebResponse)driveRequest.GetResponse())
        using (StreamReader reader = new StreamReader(response.GetResponseStream()))
        {
            string driveResult = reader.ReadToEnd();
            var drivesData = new JavaScriptSerializer().Deserialize<Dictionary<string, object>>(driveResult);
            var drives = (System.Collections.ArrayList)drivesData["value"];
            foreach (var item in drives)
            {
                var driveItem = (Dictionary<string, object>)item;
                if (driveItem["name"].ToString().Equals(documentLibraryName, StringComparison.OrdinalIgnoreCase))
                {
                    driveId = driveItem["id"].ToString();
                    break;
                }
            }
        }

        if (driveId == null)
            throw new Exception($"Drive {documentLibraryName} not found.");

        // === Upload File ===
        string uploadUrl = $"https://graph.microsoft.com/v1.0/drives/{driveId}/root:/{uploadFileName}:/content";
        byte[] fileContent = File.ReadAllBytes(filePath);

        HttpWebRequest uploadRequest = (HttpWebRequest)WebRequest.Create(uploadUrl);
        uploadRequest.Method = "PUT";
        uploadRequest.Headers.Add("Authorization", "Bearer " + accessToken);
        uploadRequest.ContentType = "application/octet-stream";
        uploadRequest.ContentLength = fileContent.Length;
        uploadRequest.Proxy = proxy;

        using (Stream requestStream = uploadRequest.GetRequestStream())
        {
            requestStream.Write(fileContent, 0, fileContent.Length);
        }

        using (HttpWebResponse uploadResponse = (HttpWebResponse)uploadRequest.GetResponse())
        using (StreamReader reader = new StreamReader(uploadResponse.GetResponseStream()))
        {
            string result = reader.ReadToEnd();
            Console.WriteLine("Upload successful: " + result);
            Dts.TaskResult = (int)ScriptResults.Success;
        }
    }
    catch (WebException webEx)
    {
        using (var reader = new StreamReader(webEx.Response.GetResponseStream()))
        {
            string responseText = reader.ReadToEnd();
            Console.WriteLine("WebException: " + responseText);
        }
        Dts.TaskResult = (int)ScriptResults.Failure;
    }
    catch (Exception ex)
    {
        Console.WriteLine("General Error: " + ex.Message);
        Dts.TaskResult = (int)ScriptResults.Failure;
    }
}
