using System;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Collections.Generic;
using System.Web.Script.Serialization;

public void Main()
{
    try
    {
        // === CONFIG ===
        string clientId = "YOUR_CLIENT_ID";
        string clientSecret = "YOUR_CLIENT_SECRET";
        string tenantId = "YOUR_TENANT_ID";
        string tenantDomain = "yourtenant.sharepoint.com";
        string siteName = "YourSiteName"; // e.g. HRPortal
        string documentLibraryName = "Documents";
        string sourceFolder = "SourceFolder";
        string destinationFolder = "DestinationFolder";
        string fileName = "file.txt";

        // === Get Access Token ===
        var tokenClient = new HttpClient();
        var tokenUrl = $"https://login.microsoftonline.com/{tenantId}/oauth2/v2.0/token";
        var tokenBody = new FormUrlEncodedContent(new[]
        {
            new KeyValuePair<string, string>("grant_type", "client_credentials"),
            new KeyValuePair<string, string>("client_id", clientId),
            new KeyValuePair<string, string>("client_secret", clientSecret),
            new KeyValuePair<string, string>("scope", "https://graph.microsoft.com/.default")
        });
        var tokenResponse = tokenClient.PostAsync(tokenUrl, tokenBody).Result;
        string tokenResult = tokenResponse.Content.ReadAsStringAsync().Result;
        string accessToken = new JavaScriptSerializer().Deserialize<dynamic>(tokenResult)["access_token"];

        // === Authenticated Client ===
        HttpClient client = new HttpClient();
        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", accessToken);

        // === Get Site ID ===
        string siteApiUrl = $"https://graph.microsoft.com/v1.0/sites/{tenantDomain}:/sites/{siteName}";
        HttpResponseMessage siteResp = client.GetAsync(siteApiUrl).Result;
        string siteJson = siteResp.Content.ReadAsStringAsync().Result;
        string siteId = new JavaScriptSerializer().Deserialize<dynamic>(siteJson)["id"];

        // === Get Drive ID ===
        string driveApiUrl = $"https://graph.microsoft.com/v1.0/sites/{siteId}/drives";
        HttpResponseMessage driveResp = client.GetAsync(driveApiUrl).Result;
        string drivesJson = driveResp.Content.ReadAsStringAsync().Result;
        var drives = new JavaScriptSerializer().Deserialize<dynamic>(drivesJson)["value"];
        string driveId = null;
        foreach (var d in drives)
        {
            if (d["name"] == documentLibraryName)
            {
                driveId = d["id"];
                break;
            }
        }
        if (driveId == null)
        {
            Console.WriteLine("Drive not found.");
            Dts.TaskResult = (int)ScriptResults.Failure;
            return;
        }

        // === Move File ===
        string fileUrl = $"https://graph.microsoft.com/v1.0/drives/{driveId}/root:/{sourceFolder}/{fileName}";
        var moveBody = new
        {
            parentReference = new { path = $"/drives/{driveId}/root:/{destinationFolder}" },
            name = fileName
        };
        string moveJson = new JavaScriptSerializer().Serialize(moveBody);
        var moveReq = new HttpRequestMessage(new HttpMethod("PATCH"), fileUrl)
        {
            Content = new StringContent(moveJson, Encoding.UTF8, "application/json")
        };
        HttpResponseMessage moveResp = client.SendAsync(moveReq).Result;
        if (moveResp.IsSuccessStatusCode)
        {
            Console.WriteLine("✅ File moved successfully.");
            Dts.TaskResult = (int)ScriptResults.Success;
        }
        else
        {
            Console.WriteLine("❌ Move failed: " + moveResp.Content.ReadAsStringAsync().Result);
            Dts.TaskResult = (int)ScriptResults.Failure;
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception: " + ex.Message);
        Dts.TaskResult = (int)ScriptResults.Failure;
    }
}
