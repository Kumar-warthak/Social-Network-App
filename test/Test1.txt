iiusing OfficeOpenXml;
using System.Data;
using System.IO;

public void ConvertExcelToCSV(string sourceFolder, string destinationFolder)
{
    string[] excelFiles = Directory.GetFiles(sourceFolder, "*.xlsx");
    foreach (string excelFile in excelFiles)
    {
        FileInfo fileInfo = new FileInfo(excelFile);
        using (ExcelPackage package = new ExcelPackage(fileInfo))
        {
            ExcelWorksheet worksheet = package.Workbook.Worksheets[0];
            DataTable dt = new DataTable();
            foreach (var firstRowCell in worksheet.Cells[1, 1, 1, worksheet.Dimension.End.Column])
            {
                dt.Columns.Add(firstRowCell.Text);
            }

            for (int rowNum = 2; rowNum <= worksheet.Dimension.End.Row; rowNum++)
            {
                var wsRow = worksheet.Cells[rowNum, 1, rowNum, worksheet.Dimension.End.Column];
                DataRow row = dt.NewRow();
                foreach (var cell in wsRow)
                {
                    row[cell.Start.Column - 1] = cell.Text;
                }
                dt.Rows.Add(row);
            }

            string csvFilePath = Path.Combine(destinationFolder, Path.GetFileNameWithoutExtension(excelFile) + ".csv");
            using (StreamWriter writer = new StreamWriter(csvFilePath))
            {
                foreach (DataRow dr in dt.Rows)
                {
                    writer.WriteLine(string.Join(",", dr.ItemArray));
                }
            }
        }
    }
}using System.IO.Compression;
using System.IO;

public void UnzipFiles(string sourceFolder, string destinationFolder)
{
    string[] zipFiles = Directory.GetFiles(sourceFolder, "*.zip");
    foreach (string zipFile in zipFiles)
    {
        string extractPath = Path.Combine(destinationFolder, Path.GetFileNameWithoutExtension(zipFile));
        ZipFile.ExtractToDirectory(zipFile, extractPath);
    }
}
