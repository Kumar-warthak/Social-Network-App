Sub ApplyDynamicRules()
    Dim wsData As Worksheet, wsRules As Worksheet
    Dim lastRowData As Long, lastRowRules As Long
    Dim i As Long, j As Long
    Dim rule As String, evalRule As String
    Dim matchFound As Boolean
    Dim colHeaders As Object
    Dim cell As Range, key As Variant
    Dim ruleParts As Variant, part As Variant
    Dim value As Variant
    Dim msg As String
    
    ' Set worksheets
    Set wsData = ThisWorkbook.Sheets("Sheet1")
    Set wsRules = ThisWorkbook.Sheets("Sheet2")

    ' Get last row of data and rules
    lastRowData = wsData.Cells(wsData.Rows.Count, 1).End(xlUp).Row
    lastRowRules = wsRules.Cells(wsRules.Rows.Count, 13).End(xlUp).Row ' Column M (13)

    ' Debug lastRowRules
    MsgBox "Last Rule Row: " & lastRowRules, vbInformation

    ' Create a dictionary to store column names and indexes
    Set colHeaders = CreateObject("Scripting.Dictionary")

    ' Store column names from the first row of Sheet1
    For Each cell In wsData.Rows(1).Cells
        If cell.Value <> "" Then
            colHeaders(cell.Value) = cell.Column
        End If
    Next cell

    ' Debug column headers
    msg = "Column Mappings in Sheet1:" & vbCrLf & vbCrLf
    For Each key In colHeaders.keys
        msg = msg & key & " â†’ Column " & colHeaders(key) & vbCrLf
    Next key
    MsgBox msg, vbInformation, "Column Mappings"

    ' Loop through each row in Sheet1
    For i = 2 To lastRowData ' Assuming row 1 has headers
        matchFound = False ' Reset match flag

        ' Loop through each rule in Sheet2 (Column M)
        For j = 1 To lastRowRules
            ' Debugging: Check if j is changing
            Debug.Print "Processing Rule Row: " & j & " | Rule: " & wsRules.Cells(j, 13).Value

            ' Get rule from Column M
            rule = Trim(wsRules.Cells(j, 13).Value)
            
            ' Skip empty rules
            If rule = "" Then Exit For

            ' Convert Rule into VBA-compatible format
            evalRule = rule

            ' Replace column names dynamically based on the rule
            ruleParts = Split(evalRule, " ")
            For Each part In ruleParts
                If colHeaders.exists(part) Then
                    value = wsData.Cells(i, colHeaders(part)).Value
                    
                    ' Check if value is numeric
                    If IsNumeric(value) Then
                        evalRule = Replace(evalRule, part, value) ' No quotes for numbers
                    Else
                        evalRule = Replace(evalRule, part, """" & value & """") ' Wrap text in quotes
                    End If
                End If
            Next part

            ' Fix "Not Like" syntax
            evalRule = Replace(evalRule, " Not Like ", " <> ")

            ' Convert "In (value1, value2)" to multiple OR conditions
            If InStr(1, evalRule, " In (") > 0 Then
                Dim inClause As String
                Dim valuesOnly As String
                
                ' Extract values inside In()
                valuesOnly = Mid(evalRule, InStr(evalRule, " In (") + 5) ' Remove " In ("
                valuesOnly = Left(valuesOnly, InStr(valuesOnly, ")") - 1) ' Remove closing ")"
                
                ' Split values and create OR condition
                Dim inValues As Variant, inPart As Variant
                inValues = Split(valuesOnly, ",")
                inClause = ""
                
                For Each inPart In inValues
                    inClause = inClause & " = " & Trim(inPart) & " Or "
                Next inPart
                
                ' Remove last "Or"
                If Right(inClause, 4) = " Or " Then
                    inClause = Left(inClause, Len(inClause) - 4)
                End If
                
                ' Replace In() condition in evalRule
                evalRule = Replace(evalRule, " In (" & valuesOnly & ")", inClause)
            End If

            ' Debug final evaluated rule before execution
            Debug.Print "Evaluating: " & evalRule

            ' Evaluate rule
            On Error Resume Next
            If Application.Evaluate(evalRule) Then
                ' If match found, update Column AC in Sheet1 with Column A from Sheet2
                wsData.Cells(i, 29).Value = wsRules.Cells(j, 1).Value ' Column AC = 29
                matchFound = True
                Exit For ' Stop checking further rules for this row
            End If
            On Error GoTo 0
        Next j
    Next i

    MsgBox "Rules applied successfully!", vbInformation
End Sub
