using System;
using System.IO;
using Microsoft.SqlServer.Dts.Runtime;

public void Main()
{
    // Folder containing the files
    string folderPath = @"C:\Path\To\Your\Folder";

    // Get all files in the folder
    string[] files = Directory.GetFiles(folderPath, "*.xls");

    foreach (string file in files)
    {
        try
        {
            // Define new file name with .csv extension
            string newFileName = Path.ChangeExtension(file, ".csv");
            
            // Rename the file
            File.Move(file, newFileName);
        }
        catch (Exception ex)
        {
            // Log any errors (customize as needed)
            Dts.Events.FireError(0, "Script Task", ex.Message, string.Empty, 0);
            Dts.TaskResult = (int)ScriptResults.Failure;
            return;
        }
    }

    Dts.TaskResult = (int)ScriptResults.Success;
}

using System;
using System.IO;
using System.Globalization;
using System.Collections.Generic;
using Microsoft.SqlServer.Dts.Runtime;
using Microsoft.VisualBasic.FileIO;

public void Main()
{
    // Define the path to your input and output CSV files
    string inputFilePath = Dts.Variables["User::InputFilePath"].Value.ToString();
    string outputFilePath = Dts.Variables["User::OutputFilePath"].Value.ToString();

    // Prepare a list to hold the modified lines
    var newLines = new List<string>();

    // Use TextFieldParser to read the CSV file correctly
    using (TextFieldParser parser = new TextFieldParser(inputFilePath))
    {
        parser.TextFieldType = FieldType.Delimited;
        parser.SetDelimiters(",");

        while (!parser.EndOfData)
        {
            // Read fields from the current line
            string[] columns = parser.ReadFields();

            // Assuming the date column is in the first position, modify as needed
            if (!string.IsNullOrWhiteSpace(columns[0])) // Check if the column is not blank or null
            {
                DateTime parsedDate;
                if (DateTime.TryParse(columns[0], out parsedDate))
                {
                    // Convert the date to the desired format (MM/dd/yyyy)
                    columns[0] = parsedDate.ToString("MM/dd/yyyy", CultureInfo.InvariantCulture);
                }
                else
                {
                    // If parsing fails, manually remove the time portion
                    columns[0] = columns[0].Split(' ')[0];
                    if (DateTime.TryParse(columns[0], out parsedDate))
                    {
                        columns[0] = parsedDate.ToString("MM/dd/yyyy", CultureInfo.InvariantCulture);
                    }
                }
            }

            // Reconstruct the line with the modified date
            newLines.Add(string.Join(",", columns));
        }
    }

    // Write the new lines to the output CSV file
    File.WriteAllLines(outputFilePath, newLines);

    Dts.TaskResult = (int)ScriptResults.Success;
}


using System;
using System.Data;
using System.IO;
using System.Globalization;
using System.Collections.Generic;
using Microsoft.SqlServer.Dts.Runtime;

public void Main()
{
    // Define the path to your input and output CSV files
    string inputFilePath = Dts.Variables["User::InputFilePath"].Value.ToString();
    string outputFilePath = Dts.Variables["User::OutputFilePath"].Value.ToString();

    // Prepare a list to hold the modified lines
    var newLines = new List<string>();

    // Read the input CSV file line by line
    using (StreamReader reader = new StreamReader(inputFilePath))
    {
        string line;
        while ((line = reader.ReadLine()) != null)
        {
            // Split the line manually, taking quotes into account
            var columns = SplitCsvLine(line);

            // Assuming the date column is in the first position, modify as needed
            if (!string.IsNullOrWhiteSpace(columns[0])) // Check if the column is not blank or null
            {
                DateTime parsedDate;
                if (DateTime.TryParse(columns[0], out parsedDate))
                {
                    // Convert the date to the desired format (MM/dd/yyyy)
                    columns[0] = parsedDate.ToString("MM/dd/yyyy", CultureInfo.InvariantCulture);
                }
                else
                {
                    // If parsing fails, manually remove the time portion
                    columns[0] = columns[0].Split(' ')[0];
                    if (DateTime.TryParse(columns[0], out parsedDate))
                    {
                        columns[0] = parsedDate.ToString("MM/dd/yyyy", CultureInfo.InvariantCulture);
                    }
                }
            }

            // Reconstruct the line with the modified date
            newLines.Add(string.Join(",", columns));
        }
    }

    // Write the new lines to the output CSV file
    File.WriteAllLines(outputFilePath, newLines);

    Dts.TaskResult = (int)ScriptResults.Success;
}

// Method to split a CSV line while considering quotes
private string[] SplitCsvLine(string line)
{
    var result = new List<string>();
    bool inQuotes = false;
    var value = "";

    foreach (char c in line)
    {
        if (c == '\"')
        {
            inQuotes = !inQuotes; // Toggle the inQuotes flag when a quote is encountered
        }
        else if (c == ',' && !inQuotes)
        {
            // Add the value to the result list when a comma is encountered outside quotes
            result.Add(value);
            value = "";
        }
        else
        {
            value += c; // Append the character to the current value
        }
    }

    result.Add(value); // Add the last value to the result list

    return result.ToArray();
}
