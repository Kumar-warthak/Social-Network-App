using System;
using System.Data;
using System.Data.SqlClient;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Threading.Tasks;
using Microsoft.Identity.Client;
using Newtonsoft.Json.Linq;

class Program
{
    static string tenantId = "your-tenant-id";
    static string clientId = "your-client-id";
    static string clientSecret = "your-client-secret";
    static string siteName = "your-site-name"; // e.g., yoursite.sharepoint.com:/sites/yoursite
    static string listName = "your-list-name";
    static string sqlConnString = "Server=your-sql-server;Database=your-db;Integrated Security=true;";
    static string storedProc = "YourInsertListItemProc";

    static async Task Main()
    {
        string token = await GetAccessToken();
        string siteId = await GetSiteId(token);
        await FetchAndInsertListItems(siteId, listName, token);
    }

    static async Task<string> GetAccessToken()
    {
        var app = ConfidentialClientApplicationBuilder
            .Create(clientId)
            .WithClientSecret(clientSecret)
            .WithAuthority(new Uri($"https://login.microsoftonline.com/{tenantId}"))
            .Build();

        var result = await app.AcquireTokenForClient(new[] { "https://graph.microsoft.com/.default" }).ExecuteAsync();
        return result.AccessToken;
    }

    static async Task<string> GetSiteId(string token)
    {
        using var client = new HttpClient();
        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        string url = $"https://graph.microsoft.com/v1.0/sites/{siteName}";
        var response = await client.GetStringAsync(url);
        dynamic json = JObject.Parse(response);
        return json.id;
    }

    static async Task FetchAndInsertListItems(string siteId, string listName, string token)
    {
        string baseUrl = $"https://graph.microsoft.com/v1.0/sites/{siteId}/lists/{listName}/items?expand=fields&$top=5000";
        string nextLink = baseUrl;

        using HttpClient client = new HttpClient();
        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        using SqlConnection conn = new SqlConnection(sqlConnString);
        conn.Open();

        while (!string.IsNullOrEmpty(nextLink))
        {
            var response = await client.GetStringAsync(nextLink);
            JObject result = JObject.Parse(response);

            var items = result["value"];
            foreach (var item in items)
            {
                string itemJson = item["fields"].ToString();
                using SqlCommand cmd = new SqlCommand(storedProc, conn)
                {
                    CommandType = CommandType.StoredProcedure
                };
                cmd.Parameters.AddWithValue("@ItemJson", itemJson);
                cmd.ExecuteNonQuery();
            }

            nextLink = result.ContainsKey("@odata.nextLink") ? result["@odata.nextLink"]?.ToString() : null;
        }
    }
}
