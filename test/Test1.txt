import requests
import pandas as pd

def get_components_for_project(base_url, project_id, access_token):
    """
    Fetch components for a specific project using the Jira API.

    Args:
        base_url (str): Jira base URL (e.g., https://yourdomain.atlassian.net).
        project_id (str): The project ID for which to fetch components.
        access_token (str): Personal Access Token for authentication.

    Returns:
        list: List of components for the given project.
    """
    url = f"{base_url}/rest/api/2/projects/{project_id}/components"  # Dynamic URL

    headers = {
        "Authorization": f"Bearer {access_token}",
        "Accept": "application/json"
    }

    response = requests.get(url, headers=headers)

    if response.status_code == 200:
        return response.json()  # Return the list of components
    else:
        raise Exception(f"Failed to fetch components: {response.status_code} - {response.text}")

def loop_and_create_df(base_url, project_ids, access_token):
    """
    Loop through the list of project IDs, get components for each project and create a DataFrame.

    Args:
        base_url (str): Jira base URL (e.g., https://yourdomain.atlassian.net).
        project_ids (list): List of project IDs.
        access_token (str): Personal Access Token for authentication.

    Returns:
        pd.DataFrame: DataFrame containing components for all projects.
    """
    all_components = []  # List to store components data
    
    for project_id in project_ids:
        try:
            print(f"Fetching components for project ID: {project_id}")
            components = get_components_for_project(base_url, project_id, access_token)
            
            # Add project_id to each component to identify from which project it belongs
            for component in components:
                component['project_id'] = project_id  # Add project_id to the component data
                
            all_components.extend(components)  # Add all components to the list
        except Exception as e:
            print(f"Error fetching components for project {project_id}: {str(e)}")
    
    # Create a DataFrame from the collected components
    if all_components:
        df = pd.DataFrame(all_components)
        return df
    else:
        print("No components found.")
        return None

# Example Usage
if __name__ == "__main__":
    BASE_URL = "https://yourdomain.atlassian.net"  # Your Jira base URL
    ACCESS_TOKEN = "your-personal-access-token"  # Your Jira PAT
    PROJECT_IDS = ["10001", "10002", "10003"]  # List of project IDs

    df = loop_and_create_df(BASE_URL, PROJECT_IDS, ACCESS_TOKEN)
    
    if df is not None:
        print(df)  # Print the DataFrame
