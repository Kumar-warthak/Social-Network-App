using System;
using System.Data;
using System.IO;
using System.Globalization;
using System.Collections.Generic;
using System.Text.RegularExpressions;
using Microsoft.SqlServer.Dts.Runtime;

public void Main()
{
    // Define the path to your input and output CSV files
    string inputFilePath = Dts.Variables["User::InputFilePath"].Value.ToString();
    string outputFilePath = Dts.Variables["User::OutputFilePath"].Value.ToString();

    // Prepare a list to hold the modified lines
    var newLines = new List<string>();
    bool isFirstLine = true;

    // Read the input CSV file line by line
    using (StreamReader reader = new StreamReader(inputFilePath))
    {
        string line;
        while ((line = reader.ReadLine()) != null)
        {
            // Split the line using a regular expression to handle quotes correctly
            var columns = ParseCsvLine(line);

            // Handle the header row to change column names
            if (isFirstLine)
            {
                for (int i = 0; i < columns.Length; i++)
                {
                    columns[i] = GetNewColumnName(columns[i]);
                }
                isFirstLine = false;
            }
            else
            {
                // Assuming the date column is in the first position, modify as needed
                if (!string.IsNullOrWhiteSpace(columns[0])) // Check if the column is not blank or null
                {
                    DateTime parsedDate;
                    if (DateTime.TryParse(columns[0], out parsedDate))
                    {
                        // Convert the date to the desired format (MM/dd/yyyy)
                        columns[0] = parsedDate.ToString("MM/dd/yyyy", CultureInfo.InvariantCulture);
                    }
                    else
                    {
                        // If parsing fails, manually remove the time portion
                        columns[0] = columns[0].Split(' ')[0];
                        if (DateTime.TryParse(columns[0], out parsedDate))
                        {
                            columns[0] = parsedDate.ToString("MM/dd/yyyy", CultureInfo.InvariantCulture);
                        }
                    }
                }
            }

            // Reconstruct the line with the modified date and/or column names
            newLines.Add(string.Join(",", columns));
        }
    }

    // Write the new lines to the output CSV file
    File.WriteAllLines(outputFilePath, newLines);

    Dts.TaskResult = (int)ScriptResults.Success;
}

// Method to parse a CSV line while considering quotes using a regular expression
private string[] ParseCsvLine(string line)
{
    // This regular expression matches CSV values considering quoted fields
    string csvPattern = @"(?:^|,)(?:""(?<val>(?:[^""]|"""")*)""|(?<val>[^,""]*))";
    var matches = Regex.Matches(line, csvPattern);
    var result = new List<string>();

    foreach (Match match in matches)
    {
        // Add the captured value, removing any escaped quotes
        result.Add(match.Groups["val"].Value.Replace("\"\"", "\""));
    }

    return result.ToArray();
}

// Method to get the new column name based on the existing name
private string GetNewColumnName(string existingName)
{
    // Example: Change column names based on existing names
    switch (existingName.Trim().ToLower())
    {
        case "oldname1":
            return "NewName1";
        case "oldname2":
            return "NewName2";
        case "date":
            return "FormattedDate";
        default:
            return existingName; // Keep the original name if no match is found
    }
}
