using System;
using System.Net.Http;
using System.Net.Http.Headers;
using System.IO;
using Microsoft.SqlServer.Dts.Runtime;
using System.Web.Script.Serialization;

public void Main()
{
    // Azure AD credentials
    string clientId = "your-client-id";
    string clientSecret = "your-client-secret";
    string tenantId = "your-tenant-id";
    string tenantDomain = "yourcompany.sharepoint.com";  // Replace with your actual domain
    string siteName = "YourSiteName";  // Example: "HRPortal"
    string documentLibraryName = "Documents";  // Name of your document library
    string filePath = @"path\to\your\file.txt"; // Path to the file you want to upload
    string uploadFileName = "file.txt";  // File name in SharePoint

    // Initialize HttpClient for making requests
    HttpClient client = new HttpClient();
    
    // Get the access token from Azure AD
    string authority = $"https://login.microsoftonline.com/{tenantId}";
    string graphApiUrl = "https://graph.microsoft.com/v1.0";
    string tokenUrl = $"{authority}/oauth2/v2.0/token";
    
    var tokenRequest = new HttpRequestMessage(HttpMethod.Post, tokenUrl);
    var tokenContent = new FormUrlEncodedContent(new[]
    {
        new KeyValuePair<string, string>("grant_type", "client_credentials"),
        new KeyValuePair<string, string>("client_id", clientId),
        new KeyValuePair<string, string>("client_secret", clientSecret),
        new KeyValuePair<string, string>("scope", "https://graph.microsoft.com/.default")
    });
    tokenRequest.Content = tokenContent;
    
    HttpResponseMessage tokenResponse = client.SendAsync(tokenRequest).Result;
    if (!tokenResponse.IsSuccessStatusCode)
    {
        Console.WriteLine("Error obtaining token: " + tokenResponse.Content.ReadAsStringAsync().Result);
        Dts.TaskResult = (int)ScriptResults.Failure;
        return;
    }

    string accessToken = new JavaScriptSerializer().Deserialize<dynamic>(tokenResponse.Content.ReadAsStringAsync().Result)["access_token"];
    client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", accessToken);

    // Step 1: Get SharePoint Site ID
    string siteUrl = $"{graphApiUrl}/sites/{tenantDomain}:/sites/{siteName}?$select=id";
    HttpResponseMessage siteResponse = client.GetAsync(siteUrl).Result;
    if (!siteResponse.IsSuccessStatusCode)
    {
        Console.WriteLine("Error fetching site ID: " + siteResponse.Content.ReadAsStringAsync().Result);
        Dts.TaskResult = (int)ScriptResults.Failure;
        return;
    }

    string siteId = new JavaScriptSerializer().Deserialize<dynamic>(siteResponse.Content.ReadAsStringAsync().Result)["id"];

    // Step 2: Get Document Library (Drive) ID
    string driveUrl = $"{graphApiUrl}/sites/{siteId}/drives";
    HttpResponseMessage driveResponse = client.GetAsync(driveUrl).Result;
    if (!driveResponse.IsSuccessStatusCode)
    {
        Console.WriteLine("Error fetching document libraries: " + driveResponse.Content.ReadAsStringAsync().Result);
        Dts.TaskResult = (int)ScriptResults.Failure;
        return;
    }

    // Find the correct document library
    var drives = new JavaScriptSerializer().Deserialize<dynamic>(driveResponse.Content.ReadAsStringAsync().Result)["value"];
    string driveId = null;
    foreach (var drive in drives)
    {
        if (drive["name"] == documentLibraryName)
        {
            driveId = drive["id"];
            break;
        }
    }

    if (string.IsNullOrEmpty(driveId))
    {
        Console.WriteLine($"Error: Document Library '{documentLibraryName}' not found.");
        Dts.TaskResult = (int)ScriptResults.Failure;
        return;
    }

    // Step 3: Upload File to Document Library
    string uploadUrl = $"{graphApiUrl}/drives/{driveId}/root:/{uploadFileName}:/content";
    byte[] fileBytes = File.ReadAllBytes(filePath);

    var uploadContent = new ByteArrayContent(fileBytes);
    uploadContent.Headers.ContentType = new MediaTypeHeaderValue("application/octet-stream");

    HttpResponseMessage uploadResponse = client.PutAsync(uploadUrl, uploadContent).Result;

    if (uploadResponse.IsSuccessStatusCode)
    {
        Console.WriteLine("File uploaded successfully");
        Dts.TaskResult = (int)ScriptResults.Success;
    }
    else
    {
        Console.WriteLine("Error uploading file: " + uploadResponse.Content.ReadAsStringAsync().Result);
        Dts.TaskResult = (int)ScriptResults.Failure;
    }
}
