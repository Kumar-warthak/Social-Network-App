using System;
using System.Net.Http;
using System.Net.Http.Headers;
using System.IO;
using System.Collections.Generic;
using System.Web.Script.Serialization;

public void Main()
{
    try
    {
        // Azure AD credentials and SharePoint settings
        string clientId = "your-client-id";
        string clientSecret = "your-client-secret";
        string tenantId = "your-tenant-id";
        string tenantDomain = "yourcompany.sharepoint.com";
        string siteName = "YourSiteName";             // e.g., "HRPortal"
        string documentLibraryName = "Documents";     // e.g., "Documents"
        string fileName = "file.txt";                 // File to download
        string savePath = @"C:\Downloads\file.txt";   // Local path to save the file

        HttpClient client = new HttpClient();

        // Get access token
        string authority = $"https://login.microsoftonline.com/{tenantId}";
        string tokenUrl = $"{authority}/oauth2/v2.0/token";
        string graphApiUrl = "https://graph.microsoft.com/v1.0";

        var tokenContent = new FormUrlEncodedContent(new[]
        {
            new KeyValuePair<string, string>("grant_type", "client_credentials"),
            new KeyValuePair<string, string>("client_id", clientId),
            new KeyValuePair<string, string>("client_secret", clientSecret),
            new KeyValuePair<string, string>("scope", "https://graph.microsoft.com/.default")
        });

        HttpResponseMessage tokenResponse = client.PostAsync(tokenUrl, tokenContent).Result;
        string tokenJson = tokenResponse.Content.ReadAsStringAsync().Result;

        JavaScriptSerializer serializer = new JavaScriptSerializer();
        serializer.MaxJsonLength = Int32.MaxValue;
        string accessToken = serializer.Deserialize<Dictionary<string, object>>(tokenJson)["access_token"].ToString();

        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", accessToken);

        // Step 1: Get Site ID
        string siteUrl = $"{graphApiUrl}/sites/{tenantDomain}:/sites/{siteName}?$select=id";
        HttpResponseMessage siteResponse = client.GetAsync(siteUrl).Result;
        string siteId = serializer.Deserialize<Dictionary<string, object>>(siteResponse.Content.ReadAsStringAsync().Result)["id"].ToString();

        // Step 2: Get Drive ID
        string driveUrl = $"{graphApiUrl}/sites/{siteId}/drives";
        HttpResponseMessage driveResponse = client.GetAsync(driveUrl).Result;
        var driveList = serializer.Deserialize<Dictionary<string, object>>(driveResponse.Content.ReadAsStringAsync().Result)["value"] as object[];

        string driveId = null;
        foreach (Dictionary<string, object> drive in driveList)
        {
            if (drive["name"].ToString() == documentLibraryName)
            {
                driveId = drive["id"].ToString();
                break;
            }
        }

        if (string.IsNullOrEmpty(driveId))
        {
            throw new Exception($"Drive '{documentLibraryName}' not found.");
        }

        // Step 3: Download file
        string downloadUrl = $"{graphApiUrl}/drives/{driveId}/root:/{fileName}:/content";
        HttpResponseMessage fileResponse = client.GetAsync(downloadUrl).Result;

        if (fileResponse.IsSuccessStatusCode)
        {
            byte[] fileBytes = fileResponse.Content.ReadAsByteArrayAsync().Result;
            File.WriteAllBytes(savePath, fileBytes);
            Console.WriteLine("File downloaded successfully.");
            Dts.TaskResult = (int)ScriptResults.Success;
        }
        else
        {
            Console.WriteLine("File download failed: " + fileResponse.Content.ReadAsStringAsync().Result);
            Dts.TaskResult = (int)ScriptResults.Failure;
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine("Error: " + ex.Message);
        Dts.TaskResult = (int)ScriptResults.Failure;
    }
}
