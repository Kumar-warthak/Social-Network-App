using System;
using System.Data;
using System.Data.SqlClient;
using System.IO;
using System.Net;
using System.Text;
using System.Text.Json;

public class GraphUserToSql
{
    public static void Main()
    {
        string tenantId = "your-tenant-id";
        string clientId = "your-client-id";
        string clientSecret = "your-client-secret";
        string sqlConnString = "Server=your-sql-server;Database=your-db;Integrated Security=true;";
        string storedProc = "YourInsertUserProc";
        string proxyUrl = "http://your-proxy-server:8080"; // leave empty "" if not needed

        try
        {
            IWebProxy proxy = string.IsNullOrEmpty(proxyUrl) ? null : new WebProxy(proxyUrl, true)
            {
                Credentials = CredentialCache.DefaultCredentials
            };

            string token = GetAccessToken(tenantId, clientId, clientSecret, proxy);
            FetchAndInsertUsers(token, sqlConnString, storedProc, proxy);
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error: " + ex.Message);
        }
    }

    static string GetAccessToken(string tenantId, string clientId, string clientSecret, IWebProxy proxy)
    {
        string url = $"https://login.microsoftonline.com/{tenantId}/oauth2/v2.0/token";
        string body = $"client_id={clientId}&scope=https%3A%2F%2Fgraph.microsoft.com%2F.default&client_secret={clientSecret}&grant_type=client_credentials";

        byte[] byteArray = Encoding.UTF8.GetBytes(body);
        HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);
        request.Method = "POST";
        request.ContentType = "application/x-www-form-urlencoded";
        request.ContentLength = byteArray.Length;
        request.Proxy = proxy;

        using (Stream reqStream = request.GetRequestStream())
        {
            reqStream.Write(byteArray, 0, byteArray.Length);
        }

        using (WebResponse response = request.GetResponse())
        using (StreamReader reader = new StreamReader(response.GetResponseStream()))
        {
            string json = reader.ReadToEnd();
            using (JsonDocument doc = JsonDocument.Parse(json))
            {
                return doc.RootElement.GetProperty("access_token").GetString();
            }
        }
    }

    static void FetchAndInsertUsers(string token, string sqlConnString, string storedProc, IWebProxy proxy)
    {
        string nextLink = "https://graph.microsoft.com/v1.0/users?$select=id,displayName,userPrincipalName&$top=999";

        using (SqlConnection conn = new SqlConnection(sqlConnString))
        {
            conn.Open();

            while (!string.IsNullOrEmpty(nextLink))
            {
                HttpWebRequest request = (HttpWebRequest)WebRequest.Create(nextLink);
                request.Method = "GET";
                request.Headers.Add("Authorization", "Bearer " + token);
                request.Proxy = proxy;

                using (WebResponse response = request.GetResponse())
                using (StreamReader reader = new StreamReader(response.GetResponseStream()))
                {
                    string json = reader.ReadToEnd();
                    using (JsonDocument doc = JsonDocument.Parse(json))
                    {
                        JsonElement root = doc.RootElement;
                        foreach (JsonElement user in root.GetProperty("value").EnumerateArray())
                        {
                            string userJson = user.GetRawText();

                            using (SqlCommand cmd = new SqlCommand(storedProc, conn))
                            {
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Parameters.AddWithValue("@UserJson", userJson);
                                cmd.ExecuteNonQuery();
                            }
                        }

                        if (root.TryGetProperty("@odata.nextLink", out JsonElement nextLinkElement))
                            nextLink = nextLinkElement.GetString();
                        else
                            nextLink = null;
                    }
                }
            }
        }
    }
}
