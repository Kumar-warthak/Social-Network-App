using System;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Collections.Generic;
using System.Web.Script.Serialization;
using System.Data.SqlClient;
using System.Data;

public void Main()
{
    try
    {
        // Azure AD & SharePoint Config
        string clientId = "your-client-id";
        string clientSecret = "your-client-secret";
        string tenantId = "your-tenant-id";
        string tenantDomain = "yourcompany.sharepoint.com";
        string siteName = "YourSiteName"; // e.g., "HRPortal"
        string listName = "YourListName"; // e.g., "EmployeeDetails"
        string sqlConnString = "Server=your-sql-server;Database=your-db;Integrated Security=true;";
        string storedProc = "YourInsertListItemProc";

        string graphApiUrl = "https://graph.microsoft.com/v1.0";
        string authority = $"https://login.microsoftonline.com/{tenantId}/oauth2/v2.0/token";

        HttpClient client = new HttpClient();

        // Get access token
        var tokenContent = new FormUrlEncodedContent(new[]
        {
            new KeyValuePair<string, string>("grant_type", "client_credentials"),
            new KeyValuePair<string, string>("client_id", clientId),
            new KeyValuePair<string, string>("client_secret", clientSecret),
            new KeyValuePair<string, string>("scope", "https://graph.microsoft.com/.default")
        });

        var tokenResponse = client.PostAsync(authority, tokenContent).Result;
        if (!tokenResponse.IsSuccessStatusCode)
        {
            Dts.Events.FireError(0, "Token Error", tokenResponse.Content.ReadAsStringAsync().Result, "", 0);
            Dts.TaskResult = (int)ScriptResults.Failure;
            return;
        }

        string accessToken = new JavaScriptSerializer().Deserialize<dynamic>(tokenResponse.Content.ReadAsStringAsync().Result)["access_token"];
        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", accessToken);

        // Get Site ID
        string siteUrl = $"{graphApiUrl}/sites/{tenantDomain}:/sites/{siteName}?$select=id";
        var siteResponse = client.GetAsync(siteUrl).Result;
        string siteId = new JavaScriptSerializer().Deserialize<dynamic>(siteResponse.Content.ReadAsStringAsync().Result)["id"];

        // Fetch List Items with Paging
        string listItemsUrl = $"{graphApiUrl}/sites/{siteId}/lists/{listName}/items?expand=fields&$top=5000";
        var js = new JavaScriptSerializer();
        using (SqlConnection conn = new SqlConnection(sqlConnString))
        {
            conn.Open();

            while (!string.IsNullOrEmpty(listItemsUrl))
            {
                var listResp = client.GetAsync(listItemsUrl).Result;
                var json = listResp.Content.ReadAsStringAsync().Result;
                var parsed = js.Deserialize<Dictionary<string, object>>(json);
                var items = (object[])((Dictionary<string, object>)parsed)["value"];

                foreach (Dictionary<string, object> item in items)
                {
                    Dictionary<string, object> fields = (Dictionary<string, object>)item["fields"];
                    string itemJson = js.Serialize(fields);

                    // Insert into SQL Server
                    using (SqlCommand cmd = new SqlCommand(storedProc, conn))
                    {
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.AddWithValue("@ItemJson", itemJson);
                        cmd.ExecuteNonQuery();
                    }
                }

                // Get next page
                if (parsed.ContainsKey("@odata.nextLink"))
                    listItemsUrl = parsed["@odata.nextLink"].ToString();
                else
                    listItemsUrl = null;
            }
        }

        Dts.TaskResult = (int)ScriptResults.Success;
    }
    catch (Exception ex)
    {
        Dts.Events.FireError(0, "Script Task Error", ex.ToString(), "", 0);
        Dts.TaskResult = (int)ScriptResults.Failure;
    }
}
