using System;
using System.Collections.Generic;
using System.IO;
using System.Net;
using System.Text;
using System.Web.Script.Serialization;

namespace SharePointUsersFetcher
{
    public class Program
    {
        public static void Main()
        {
            string tenantId = "your-tenant-id";
            string clientId = "your-client-id";
            string clientSecret = "your-client-secret";
            string siteDomain = "yourtenant.sharepoint.com";
            string siteName = "sites/yoursite"; // or use "teams/YourTeamName"
            string proxyUrl = null; // Optional: "http://yourproxy:port"

            try
            {
                string token = GetSharePointAccessToken(tenantId, clientId, clientSecret, siteDomain, proxyUrl);
                string siteUrl = $"https://{siteDomain}/{siteName}";
                string usersJson = GetSharePointSiteUsersJson(siteUrl, token, proxyUrl);

                Console.WriteLine("Users JSON:");
                Console.WriteLine(usersJson);
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error: " + ex.Message);
            }
        }

        public static string GetSharePointAccessToken(string tenantId, string clientId, string clientSecret, string siteDomain, string proxyUrl)
        {
            string resource = $"00000003-0000-0ff1-ce00-000000000000/{siteDomain}@{tenantId}";
            string authUrl = $"https://accounts.accesscontrol.windows.net/{tenantId}/tokens/OAuth/2";
            string postData = $"grant_type=client_credentials&client_id={clientId}@{tenantId}&client_secret={Uri.EscapeDataString(clientSecret)}&resource={Uri.EscapeDataString(resource)}";

            byte[] byteArray = Encoding.UTF8.GetBytes(postData);
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(authUrl);
            request.Method = "POST";
            request.ContentType = "application/x-www-form-urlencoded";
            request.ContentLength = byteArray.Length;

            if (!string.IsNullOrEmpty(proxyUrl))
                request.Proxy = new WebProxy(proxyUrl) { Credentials = CredentialCache.DefaultCredentials };

            using (Stream stream = request.GetRequestStream())
                stream.Write(byteArray, 0, byteArray.Length);

            using (WebResponse response = request.GetResponse())
            using (StreamReader reader = new StreamReader(response.GetResponseStream()))
            {
                string json = reader.ReadToEnd();
                var serializer = new JavaScriptSerializer();
                var result = serializer.Deserialize<Dictionary<string, object>>(json);
                return result["access_token"].ToString();
            }
        }

        public static string GetSharePointSiteUsersJson(string siteUrl, string accessToken, string proxyUrl = null)
        {
            string apiUrl = $"{siteUrl}/_api/web/siteusers";
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(apiUrl);
            request.Method = "GET";
            request.Accept = "application/json;odata=verbose";
            request.Headers.Add("Authorization", "Bearer " + accessToken);

            if (!string.IsNullOrEmpty(proxyUrl))
                request.Proxy = new WebProxy(proxyUrl) { Credentials = CredentialCache.DefaultCredentials };

            using (HttpWebResponse response = (HttpWebResponse)request.GetResponse())
            using (StreamReader reader = new StreamReader(response.GetResponseStream()))
            {
                string rawJson = reader.ReadToEnd();
                var serializer = new JavaScriptSerializer { MaxJsonLength = int.MaxValue };
                var outer = serializer.Deserialize<Dictionary<string, object>>(rawJson);
                var d = (Dictionary<string, object>)outer["d"];
                var results = (System.Collections.ArrayList)d["results"];

                var simplifiedUsers = new List<Dictionary<string, object>>();

                foreach (Dictionary<string, object> user in results)
                {
                    simplifiedUsers.Add(new Dictionary<string, object>
                    {
                        { "Id", user["Id"] },
                        { "Title", user["Title"] },
                        { "Email", user["Email"] },
                        { "LoginName", user["LoginName"] }
                    });
                }

                return serializer.Serialize(simplifiedUsers);
            }
        }
    }
}
