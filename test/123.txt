using System;
using System.Collections.Generic;
using System.IO;
using System.Net;
using System.Text;
using System.Web.Script.Serialization;

public static class SharePointUserHelper
{
    public static string GetAllSharePointUsersAsJson(string siteUrl, string accessToken, string proxyUrl = null)
    {
        string url = $"{siteUrl}/_api/web/siteusers";

        HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);
        request.Method = "GET";
        request.Accept = "application/json;odata=verbose";
        request.Headers.Add("Authorization", "Bearer " + accessToken);

        if (!string.IsNullOrEmpty(proxyUrl))
            request.Proxy = new WebProxy(proxyUrl) { Credentials = CredentialCache.DefaultCredentials };

        using (WebResponse response = request.GetResponse())
        using (StreamReader reader = new StreamReader(response.GetResponseStream()))
        {
            string json = reader.ReadToEnd();

            // Optionally clean up @odata properties (if needed)
            JavaScriptSerializer serializer = new JavaScriptSerializer();
            var outer = serializer.Deserialize<Dictionary<string, object>>(json);
            var d = (Dictionary<string, object>)outer["d"];
            var users = (object[])d["results"];

            List<Dictionary<string, object>> cleanUsers = new List<Dictionary<string, object>>();

            foreach (Dictionary<string, object> user in users)
            {
                // Exclude @odata fields
                Dictionary<string, object> cleaned = new Dictionary<string, object>();
                foreach (var kv in user)
                {
                    if (!kv.Key.StartsWith("__") && !kv.Key.StartsWith("odata"))
                        cleaned[kv.Key] = kv.Value;
                }
                cleanUsers.Add(cleaned);
            }

            return serializer.Serialize(cleanUsers);
        }
    }
}
