using System;
using System.Net;
using System.IO;
using System.Text;
using System.Web.Script.Serialization;
using System.Collections.Generic;

namespace SharePointGraphExample
{
    class Program
    {
        static void Main()
        {
            string tenantId = "your-tenant-id";
            string clientId = "your-client-id";
            string clientSecret = "your-client-secret";
            string siteId = "your-site-id";              // Use Graph site ID (not SharePoint URL)
            string listId = "your-list-id-or-name";      // Can use name or list GUID
            string proxyUrl = null;                      // Optional: "http://your-proxy:port"

            try
            {
                string token = GetGraphAccessToken(tenantId, clientId, clientSecret);
                string json = GetListItemsWithPersonFields(siteId, listId, token, proxyUrl);
                Console.WriteLine(json);
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error: " + ex.Message);
            }
        }

        public static string GetGraphAccessToken(string tenantId, string clientId, string clientSecret)
        {
            string url = $"https://login.microsoftonline.com/{tenantId}/oauth2/v2.0/token";
            string postData = $"client_id={clientId}" +
                              $"&scope=https%3A%2F%2Fgraph.microsoft.com%2F.default" +
                              $"&client_secret={Uri.EscapeDataString(clientSecret)}" +
                              $"&grant_type=client_credentials";

            byte[] byteArray = Encoding.UTF8.GetBytes(postData);
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);
            request.Method = "POST";
            request.ContentType = "application/x-www-form-urlencoded";
            request.ContentLength = byteArray.Length;

            using (Stream stream = request.GetRequestStream())
                stream.Write(byteArray, 0, byteArray.Length);

            using (WebResponse response = request.GetResponse())
            using (StreamReader reader = new StreamReader(response.GetResponseStream()))
            {
                string result = reader.ReadToEnd();
                var serializer = new JavaScriptSerializer();
                var tokenResult = serializer.Deserialize<Dictionary<string, object>>(result);
                return tokenResult["access_token"].ToString();
            }
        }

        public static string GetListItemsWithPersonFields(string siteId, string listId, string token, string proxyUrl = null)
        {
            string nextUrl = $"https://graph.microsoft.com/v1.0/sites/{siteId}/lists/{listId}/items?$expand=fields&$top=999";
            JavaScriptSerializer serializer = new JavaScriptSerializer { MaxJsonLength = int.MaxValue };
            List<object> allItems = new List<object>();

            while (!string.IsNullOrEmpty(nextUrl))
            {
                HttpWebRequest request = (HttpWebRequest)WebRequest.Create(nextUrl);
                request.Method = "GET";
                request.Headers.Add("Authorization", "Bearer " + token);
                request.Accept = "application/json";

                if (!string.IsNullOrEmpty(proxyUrl))
                    request.Proxy = new WebProxy(proxyUrl) { Credentials = CredentialCache.DefaultCredentials };

                using (WebResponse response = request.GetResponse())
                using (StreamReader reader = new StreamReader(response.GetResponseStream()))
                {
                    string json = reader.ReadToEnd();
                    var parsed = serializer.Deserialize<Dictionary<string, object>>(json);

                    if (parsed.ContainsKey("value"))
                    {
                        var items = (System.Collections.ArrayList)parsed["value"];
                        foreach (var item in items)
                        {
                            var dict = item as Dictionary<string, object>;
                            if (dict != null && dict.ContainsKey("fields"))
                            {
                                allItems.Add(dict["fields"]);
                            }
                        }
                    }

                    nextUrl = parsed.ContainsKey("@odata.nextLink") ? parsed["@odata.nextLink"].ToString() : null;
                }
            }

            return serializer.Serialize(allItems);
        }
    }
}
