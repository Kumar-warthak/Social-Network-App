
using System;
using System.Collections.Generic;
using System.IO;
using System.Net;
using System.Text;
using System.Web.Script.Serialization;

namespace SharePointUserIdFetcher
{
    class Program
    {
        static void Main(string[] args)
        {
            string tenantId = "your-tenant-id";
            string clientId = "your-client-id";
            string clientSecret = "your-client-secret";
            string siteUrl = "https://yourtenant.sharepoint.com/sites/yoursite";
            string email = "john.doe@yourtenant.com";
            string proxyUrl = null; // set if needed

            try
            {
                string accessToken = GetSharePointAccessToken(tenantId, clientId, clientSecret, "yourtenant.sharepoint.com", proxyUrl);
                int sharePointUserId = GetSharePointUserId(siteUrl, accessToken, email, proxyUrl);

                Console.WriteLine("SharePoint User ID for " + email + ": " + sharePointUserId);
            }
            catch (Exception ex)
            {
                Console.WriteLine("ERROR: " + ex.Message);
            }
        }

        static string GetSharePointAccessToken(string tenantId, string clientId, string clientSecret, string resourceHost, string proxyUrl = null)
        {
            string tokenUrl = $"https://accounts.accesscontrol.windows.net/{tenantId}/tokens/OAuth/2";
            string resource = $"00000003-0000-0ff1-ce00-000000000000/{resourceHost}@{tenantId}";

            string postData = $"grant_type=client_credentials&client_id={clientId}@{tenantId}&client_secret={Uri.EscapeDataString(clientSecret)}&resource={resource}";
            byte[] data = Encoding.UTF8.GetBytes(postData);

            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(tokenUrl);
            request.Method = "POST";
            request.ContentType = "application/x-www-form-urlencoded";
            request.ContentLength = data.Length;

            if (!string.IsNullOrEmpty(proxyUrl))
                request.Proxy = new WebProxy(proxyUrl) { Credentials = CredentialCache.DefaultCredentials };

            using (Stream stream = request.GetRequestStream())
                stream.Write(data, 0, data.Length);

            using (WebResponse response = request.GetResponse())
            using (StreamReader reader = new StreamReader(response.GetResponseStream()))
            {
                string json = reader.ReadToEnd();
                var serializer = new JavaScriptSerializer();
                var tokenData = serializer.Deserialize<Dictionary<string, object>>(json);
                return tokenData["access_token"].ToString();
            }
        }

        static int GetSharePointUserId(string siteUrl, string accessToken, string userEmail, string proxyUrl = null)
        {
            string url = $"{siteUrl}/_api/web/ensureuser";
            string payload = $"{{ \"logonName\": \"{userEmail}\" }}";
            byte[] byteArray = Encoding.UTF8.GetBytes(payload);

            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);
            request.Method = "POST";
            request.Accept = "application/json;odata=verbose";
            request.ContentType = "application/json;odata=verbose";
            request.Headers.Add("Authorization", "Bearer " + accessToken);
            request.ContentLength = byteArray.Length;

            if (!string.IsNullOrEmpty(proxyUrl))
                request.Proxy = new WebProxy(proxyUrl) { Credentials = CredentialCache.DefaultCredentials };

            using (Stream requestStream = request.GetRequestStream())
                requestStream.Write(byteArray, 0, byteArray.Length);

            using (WebResponse response = request.GetResponse())
            using (StreamReader reader = new StreamReader(response.GetResponseStream()))
            {
                string json = reader.ReadToEnd();
                JavaScriptSerializer serializer = new JavaScriptSerializer();
                var outer = serializer.Deserialize<Dictionary<string, object>>(json);
                var d = (Dictionary<string, object>)outer["d"];
                return Convert.ToInt32(d["Id"]);
            }
        }
    }
}
