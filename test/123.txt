from decimal import Decimal, InvalidOperation

# Function to check if value is valid for given precision and scale
def is_valid_numeric(val, precision, scale):
    try:
        d = Decimal(str(val).strip())
        int_digits = len(d.as_tuple().digits) + d.as_tuple().exponent if d.as_tuple().exponent < 0 else len(str(int(d)))
        frac_digits = abs(d.as_tuple().exponent)
        
        return int_digits <= (precision - scale) and frac_digits <= scale
    except (InvalidOperation, ValueError):
        return False

# ✅ Replace these with your actual DataFrame column names and SQL precision/scale
numeric_checks = {
    'Amount': (7, 2),      # NUMERIC(7,2)
    'Quantity': (5, 0),    # NUMERIC(5,0)
    'Rate': (10, 3),       # NUMERIC(10,3)
}

# Loop through each numeric column and validate values
for col, (precision, scale) in numeric_checks.items():
    if col in df.columns:
        invalid_mask = ~df[col].apply(lambda x: is_valid_numeric(x, precision, scale))
        invalid_rows = df[invalid_mask]
        if not invalid_rows.empty:
            print(f"\n❌ Problematic values in column '{col}' for NUMERIC({precision},{scale}):")
            print(invalid_rows[[col]])
        else:
            print(f"✅ Column '{col}' is valid.")
    else:
        print(f"⚠️ Column '{col}' not found in DataFrame.")
