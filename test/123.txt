using System;
using System.Data;
using System.Data.SqlClient;
using System.IO;
using System.Net;
using System.Text;
using System.Web.Script.Serialization;
using System.Collections;

namespace ST_YourNamespace
{
    public partial class ScriptMain
    {
        public void Main()
        {
            string tenantId = "your-tenant-id";
            string clientId = "your-client-id";
            string clientSecret = "your-client-secret";
            string siteName = "your-tenant.sharepoint.com:/sites/yoursite";
            string listName = "your-list-name";
            string sqlConnString = "Server=your-sql-server;Database=your-db;Integrated Security=true;";
            string storedProc = "YourInsertListItemProc";
            string proxyUrl = "http://your-proxy-server:port";

            try
            {
                string token = GetAccessToken(tenantId, clientId, clientSecret, proxyUrl);
                string siteId = GetSiteId(token, siteName, proxyUrl);
                FetchAndInsertListItems(siteId, token, listName, sqlConnString, storedProc, proxyUrl);
                Dts.TaskResult = (int)ScriptResults.Success;
            }
            catch (Exception ex)
            {
                Dts.Events.FireError(0, "Script Task", ex.ToString(), "", 0);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }
        }

        private string GetAccessToken(string tenantId, string clientId, string clientSecret, string proxyUrl)
        {
            string url = $"https://login.microsoftonline.com/{tenantId}/oauth2/v2.0/token";
            string postData = $"client_id={clientId}&scope=https%3A%2F%2Fgraph.microsoft.com%2F.default&client_secret={clientSecret}&grant_type=client_credentials";

            byte[] byteArray = Encoding.UTF8.GetBytes(postData);
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);
            request.Method = "POST";
            request.ContentType = "application/x-www-form-urlencoded";
            request.ContentLength = byteArray.Length;

            if (!string.IsNullOrEmpty(proxyUrl))
            {
                request.Proxy = new WebProxy(proxyUrl, true)
                {
                    Credentials = CredentialCache.DefaultCredentials
                };
            }

            using (Stream dataStream = request.GetRequestStream())
            {
                dataStream.Write(byteArray, 0, byteArray.Length);
            }

            using (WebResponse response = request.GetResponse())
            using (StreamReader reader = new StreamReader(response.GetResponseStream()))
            {
                string jsonResponse = reader.ReadToEnd();
                JavaScriptSerializer serializer = new JavaScriptSerializer { MaxJsonLength = Int32.MaxValue };
                var result = (Dictionary<string, object>)serializer.Deserialize<object>(jsonResponse);
                return result["access_token"].ToString();
            }
        }

        private string GetSiteId(string token, string siteName, string proxyUrl)
        {
            string url = $"https://graph.microsoft.com/v1.0/sites/{siteName}";
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);
            request.Method = "GET";
            request.Headers.Add("Authorization", "Bearer " + token);

            if (!string.IsNullOrEmpty(proxyUrl))
            {
                request.Proxy = new WebProxy(proxyUrl, true)
                {
                    Credentials = CredentialCache.DefaultCredentials
                };
            }

            using (WebResponse response = request.GetResponse())
            using (StreamReader reader = new StreamReader(response.GetResponseStream()))
            {
                string json = reader.ReadToEnd();
                JavaScriptSerializer serializer = new JavaScriptSerializer { MaxJsonLength = Int32.MaxValue };
                var result = (Dictionary<string, object>)serializer.Deserialize<object>(json);
                return result["id"].ToString();
            }
        }

        private void FetchAndInsertListItems(string siteId, string token, string listName, string sqlConnString, string storedProc, string proxyUrl)
        {
            string nextLink = $"https://graph.microsoft.com/v1.0/sites/{siteId}/lists/{listName}/items?expand=fields&$top=5000";

            using (SqlConnection conn = new SqlConnection(sqlConnString))
            {
                conn.Open();

                while (!string.IsNullOrEmpty(nextLink))
                {
                    HttpWebRequest request = (HttpWebRequest)WebRequest.Create(nextLink);
                    request.Method = "GET";
                    request.Headers.Add("Authorization", "Bearer " + token);

                    if (!string.IsNullOrEmpty(proxyUrl))
                    {
                        request.Proxy = new WebProxy(proxyUrl, true)
                        {
                            Credentials = CredentialCache.DefaultCredentials
                        };
                    }

                    using (WebResponse response = request.GetResponse())
                    using (StreamReader reader = new StreamReader(response.GetResponseStream()))
                    {
                        string json = reader.ReadToEnd();
                        JavaScriptSerializer serializer = new JavaScriptSerializer { MaxJsonLength = Int32.MaxValue };
                        var result = (Dictionary<string, object>)serializer.Deserialize<object>(json);

                        ArrayList items = (ArrayList)result["value"];
                        foreach (Dictionary<string, object> item in items)
                        {
                            var fields = (Dictionary<string, object>)item["fields"];
                            string itemJson = serializer.Serialize(fields);

                            using (SqlCommand cmd = new SqlCommand(storedProc, conn))
                            {
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Parameters.AddWithValue("@ItemJson", itemJson);
                                cmd.ExecuteNonQuery();
                            }
                        }

                        nextLink = result.ContainsKey("@odata.nextLink") ? result["@odata.nextLink"].ToString() : null;
                    }
                }
            }
        }

        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        }
    }
}


private void FetchAndInsertListItems(string siteId, string token, string listName, string sqlConnString, string storedProc, string proxyUrl)
{
    string nextLink = $"https://graph.microsoft.com/v1.0/sites/{siteId}/lists/{listName}/items?expand=fields&$top=5000";

    using (SqlConnection conn = new SqlConnection(sqlConnString))
    {
        conn.Open();
        JavaScriptSerializer serializer = new JavaScriptSerializer { MaxJsonLength = Int32.MaxValue };

        while (!string.IsNullOrEmpty(nextLink))
        {
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(nextLink);
            request.Method = "GET";
            request.Headers.Add("Authorization", "Bearer " + token);

            if (!string.IsNullOrEmpty(proxyUrl))
            {
                request.Proxy = new WebProxy(proxyUrl, true)
                {
                    Credentials = CredentialCache.DefaultCredentials
                };
            }

            using (WebResponse response = request.GetResponse())
            using (StreamReader reader = new StreamReader(response.GetResponseStream()))
            {
                string json = reader.ReadToEnd();
                var result = (Dictionary<string, object>)serializer.Deserialize<object>(json);

                object[] items = (object[])result["value"];
                foreach (object obj in items)
                {
                    Dictionary<string, object> item = (Dictionary<string, object>)obj;
                    var fields = (Dictionary<string, object>)item["fields"];
                    string itemJson = serializer.Serialize(fields);

                    using (SqlCommand cmd = new SqlCommand(storedProc, conn))
                    {
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.AddWithValue("@ItemJson", itemJson);
                        cmd.ExecuteNonQuery();
                    }
                }

                nextLink = result.ContainsKey("@odata.nextLink") ? result["@odata.nextLink"].ToString() : null;
            }
        }
    }
}
